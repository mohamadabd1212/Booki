"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./middleware.js":
/*!***********************!*\
  !*** ./middleware.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(middleware)/./node_modules/next/dist/esm/api/server.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! jose */ \"(middleware)/./node_modules/jose/dist/webapi/jwt/verify.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst JWT_SECRET = process.env.JWT_SECRET;\nconst ROLE_CLAIM = 'http://schemas.microsoft.com/ws/2008/06/identity/claims/role';\nconst VERIFIED_CLAIM = 'http://schemas.xmlsoap.org/ws/2009/09/identity/claims/actor';\n// Helper to generate CSRF token\nfunction generateCSRFToken() {\n    return crypto__WEBPACK_IMPORTED_MODULE_2___default().randomBytes(32).toString('hex'); // Generates a secure random token\n}\n// Helper to verify CSRF token\nfunction isValidCSRFToken(sessionToken, csrfToken) {\n    return sessionToken === csrfToken;\n}\nasync function verifyToken(token) {\n    try {\n        return await (0,jose__WEBPACK_IMPORTED_MODULE_3__.jwtVerify)(token, new TextEncoder().encode(JWT_SECRET));\n    } catch  {\n        return null;\n    }\n}\nfunction clearCookies(response, cookieNames) {\n    cookieNames.forEach((name)=>response.cookies.set(name, '', {\n            maxAge: 0,\n            path: '/'\n        }));\n}\nasync function middleware(req) {\n    const pathname = req.nextUrl.pathname;\n    const cookieStore = await (0,next_headers__WEBPACK_IMPORTED_MODULE_1__.cookies)();\n    const tokenCookie = cookieStore.get('token');\n    const otpTokenCookie = cookieStore.get('otp_token');\n    const resetTokenCookie = cookieStore.get('reset');\n    const csrfTokenCookie = cookieStore.get('csrf_token'); // CSRF token cookie\n    const referer = req.headers.get('referer');\n    const tokensPresent = [\n        tokenCookie,\n        otpTokenCookie,\n        resetTokenCookie\n    ].filter(Boolean);\n    const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n    // Referer check for localhost\n    if (referer == null || !referer.startsWith('http://localhost:3000')) {\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse('Forbidden ', {\n            status: 403\n        });\n    }\n    // Prevent multiple tokens from being set at the same time\n    if (tokensPresent.length > 1) {\n        clearCookies(response, [\n            'token',\n            'otp_token',\n            'reset'\n        ]);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL('/un/login', req.url));\n    }\n    // Auth page check\n    const isAuthPage = [\n        '/un/login',\n        '/un/register'\n    ].some((path)=>pathname.startsWith(path));\n    const isOtpPage = pathname.startsWith('/un/otpValidatePassword');\n    const isResetPage = pathname.startsWith('/un/resetPassword');\n    const isConfirmEmailPage = pathname.startsWith('/User/VerifyEmail');\n    const isProtectedPage = pathname.startsWith('/User') || pathname.startsWith('/Admin');\n    async function verifyOrClear(tokenCookie) {\n        if (!tokenCookie) return null;\n        const decoded = await verifyToken(tokenCookie.value);\n        if (!decoded) {\n            clearCookies(response, [\n                'token',\n                'otp_token',\n                'reset'\n            ]);\n            return null;\n        }\n        return decoded;\n    }\n    // CSRF Token handling: Generate and set the CSRF token if not set\n    if (!csrfTokenCookie) {\n        const csrfToken = generateCSRFToken(); // Generate a CSRF token if not present\n        response.cookies.set('csrf_token', csrfToken, {\n            httpOnly: false,\n            secure: \"development\" === 'production',\n            sameSite: 'Strict',\n            path: '/'\n        });\n    }\n    // Handle CSRF token validation for state-changing requests (POST, PUT, DELETE)\n    if (req.method === 'POST' || req.method === 'PUT' || req.method === 'DELETE') {\n        const csrfTokenFromHeader = req.headers.get('x-csrf-token'); // CSRF token sent by client (custom header)\n        if (!csrfTokenFromHeader || !csrfTokenCookie) {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse('CSRF token missing or invalid', {\n                status: 403\n            });\n        }\n        // Validate CSRF token\n        if (!isValidCSRFToken(csrfTokenCookie.value, csrfTokenFromHeader)) {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse('Forbidden: Invalid CSRF token', {\n                status: 403\n            });\n        }\n    }\n    // OTP page requires valid otp_token\n    if (isOtpPage) {\n        const decoded = await verifyOrClear(otpTokenCookie);\n        if (!decoded) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL('/un/login', req.url));\n        return response;\n    }\n    // Reset page requires valid reset token\n    if (isResetPage) {\n        const decoded = await verifyOrClear(resetTokenCookie);\n        if (!decoded) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL('/un/login', req.url));\n        return response;\n    }\n    // Auth pages handling (Login, Register)\n    if (isAuthPage) {\n        clearCookies(response, [\n            'otp_token',\n            'reset'\n        ]);\n        if (tokenCookie) {\n            const decoded = await verifyOrClear(tokenCookie);\n            if (!decoded) return response; // Stay on login page after clearing\n            const roles = decoded.payload[ROLE_CLAIM] || [];\n            const role = Array.isArray(roles) ? roles[0] : roles;\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(`/${role}/dashboard`, req.url));\n        }\n        return response;\n    }\n    // Protected pages\n    if (isProtectedPage) {\n        const decoded = await verifyOrClear(tokenCookie);\n        if (!decoded) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL('/un/login', req.url));\n        const roles = decoded.payload[ROLE_CLAIM] || [];\n        const role = Array.isArray(roles) ? roles[0] : roles;\n        if (isConfirmEmailPage) {\n            const isVerified = decoded.payload[VERIFIED_CLAIM];\n            if (isVerified === 'True') {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(`/${role}/dashboard`, req.url));\n            }\n            return response;\n        }\n        // Role-based restriction\n        if (pathname.startsWith('/Admin') && role !== 'Admin' || pathname.startsWith('/User') && role !== 'User') {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.redirect(new URL(`/${role}/dashboard`, req.url));\n        }\n        return response;\n    }\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbWlkZGxld2FyZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkM7QUFDVjtBQUNNO0FBQ1g7QUFFNUIsTUFBTUksYUFBYUMsUUFBUUMsR0FBRyxDQUFDRixVQUFVO0FBQ3pDLE1BQU1HLGFBQWE7QUFDbkIsTUFBTUMsaUJBQWlCO0FBRXZCLGdDQUFnQztBQUNoQyxTQUFTQztJQUNQLE9BQU9OLHlEQUFrQixDQUFDLElBQUlRLFFBQVEsQ0FBQyxRQUFRLGtDQUFrQztBQUNuRjtBQUVBLDhCQUE4QjtBQUM5QixTQUFTQyxpQkFBaUJDLFlBQVksRUFBRUMsU0FBUztJQUMvQyxPQUFPRCxpQkFBaUJDO0FBQzFCO0FBRUEsZUFBZUMsWUFBWUMsS0FBSztJQUM5QixJQUFJO1FBQ0YsT0FBTyxNQUFNZiwrQ0FBU0EsQ0FBQ2UsT0FBTyxJQUFJQyxjQUFjQyxNQUFNLENBQUNkO0lBQ3pELEVBQUUsT0FBTTtRQUNOLE9BQU87SUFDVDtBQUNGO0FBRUEsU0FBU2UsYUFBYUMsUUFBUSxFQUFFQyxXQUFXO0lBQ3pDQSxZQUFZQyxPQUFPLENBQUMsQ0FBQ0MsT0FDbkJILFNBQVNsQixPQUFPLENBQUNzQixHQUFHLENBQUNELE1BQU0sSUFBSTtZQUM3QkUsUUFBUTtZQUNSQyxNQUFNO1FBQ1I7QUFFSjtBQUVPLGVBQWVDLFdBQVdDLEdBQUc7SUFDbEMsTUFBTUMsV0FBV0QsSUFBSUUsT0FBTyxDQUFDRCxRQUFRO0lBQ3JDLE1BQU1FLGNBQWMsTUFBTTdCLHFEQUFPQTtJQUNqQyxNQUFNOEIsY0FBY0QsWUFBWUUsR0FBRyxDQUFDO0lBQ3BDLE1BQU1DLGlCQUFpQkgsWUFBWUUsR0FBRyxDQUFDO0lBQ3ZDLE1BQU1FLG1CQUFtQkosWUFBWUUsR0FBRyxDQUFDO0lBQ3pDLE1BQU1HLGtCQUFrQkwsWUFBWUUsR0FBRyxDQUFDLGVBQWUsb0JBQW9CO0lBQzNFLE1BQU1JLFVBQVVULElBQUlVLE9BQU8sQ0FBQ0wsR0FBRyxDQUFDO0lBQ2hDLE1BQU1NLGdCQUFnQjtRQUFDUDtRQUFhRTtRQUFnQkM7S0FBaUIsQ0FBQ0ssTUFBTSxDQUFDQztJQUM3RSxNQUFNckIsV0FBV3BCLHFEQUFZQSxDQUFDMEMsSUFBSTtJQUVsQyw4QkFBOEI7SUFDOUIsSUFBSUwsV0FBVyxRQUFRLENBQUNBLFFBQVFNLFVBQVUsQ0FBQywwQkFBMEI7UUFDbkUsT0FBTyxJQUFJM0MscURBQVlBLENBQUMsY0FBYztZQUFFNEMsUUFBUTtRQUFJO0lBQ3REO0lBRUEsMERBQTBEO0lBQzFELElBQUlMLGNBQWNNLE1BQU0sR0FBRyxHQUFHO1FBQzVCMUIsYUFBYUMsVUFBVTtZQUFDO1lBQVM7WUFBYTtTQUFRO1FBQ3RELE9BQU9wQixxREFBWUEsQ0FBQzhDLFFBQVEsQ0FBQyxJQUFJQyxJQUFJLGFBQWFuQixJQUFJb0IsR0FBRztJQUMzRDtJQUVBLGtCQUFrQjtJQUNsQixNQUFNQyxhQUFhO1FBQUM7UUFBYTtLQUFlLENBQUNDLElBQUksQ0FBQyxDQUFDeEIsT0FBU0csU0FBU2MsVUFBVSxDQUFDakI7SUFDcEYsTUFBTXlCLFlBQVl0QixTQUFTYyxVQUFVLENBQUM7SUFDdEMsTUFBTVMsY0FBY3ZCLFNBQVNjLFVBQVUsQ0FBQztJQUN4QyxNQUFNVSxxQkFBcUJ4QixTQUFTYyxVQUFVLENBQUM7SUFDL0MsTUFBTVcsa0JBQWtCekIsU0FBU2MsVUFBVSxDQUFDLFlBQVlkLFNBQVNjLFVBQVUsQ0FBQztJQUU1RSxlQUFlWSxjQUFjdkIsV0FBVztRQUN0QyxJQUFJLENBQUNBLGFBQWEsT0FBTztRQUN6QixNQUFNd0IsVUFBVSxNQUFNekMsWUFBWWlCLFlBQVl5QixLQUFLO1FBQ25ELElBQUksQ0FBQ0QsU0FBUztZQUNackMsYUFBYUMsVUFBVTtnQkFBQztnQkFBUztnQkFBYTthQUFRO1lBQ3RELE9BQU87UUFDVDtRQUNBLE9BQU9vQztJQUNUO0lBRUEsa0VBQWtFO0lBQ2xFLElBQUksQ0FBQ3BCLGlCQUFpQjtRQUNwQixNQUFNdEIsWUFBWUwscUJBQXFCLHVDQUF1QztRQUM5RVcsU0FBU2xCLE9BQU8sQ0FBQ3NCLEdBQUcsQ0FBQyxjQUFjVixXQUFXO1lBQzVDNEMsVUFBVTtZQUNWQyxRQUFRdEQsa0JBQXlCO1lBQ2pDdUQsVUFBVTtZQUNWbEMsTUFBTTtRQUNSO0lBQ0Y7SUFFQSwrRUFBK0U7SUFDL0UsSUFBSUUsSUFBSWlDLE1BQU0sS0FBSyxVQUFVakMsSUFBSWlDLE1BQU0sS0FBSyxTQUFTakMsSUFBSWlDLE1BQU0sS0FBSyxVQUFVO1FBQzVFLE1BQU1DLHNCQUFzQmxDLElBQUlVLE9BQU8sQ0FBQ0wsR0FBRyxDQUFDLGlCQUFpQiw0Q0FBNEM7UUFFekcsSUFBSSxDQUFDNkIsdUJBQXVCLENBQUMxQixpQkFBaUI7WUFDNUMsT0FBTyxJQUFJcEMscURBQVlBLENBQUMsaUNBQWlDO2dCQUFFNEMsUUFBUTtZQUFJO1FBQ3pFO1FBRUEsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQ2hDLGlCQUFpQndCLGdCQUFnQnFCLEtBQUssRUFBRUssc0JBQXNCO1lBQ2pFLE9BQU8sSUFBSTlELHFEQUFZQSxDQUFDLGlDQUFpQztnQkFBRTRDLFFBQVE7WUFBSTtRQUN6RTtJQUNGO0lBRUEsb0NBQW9DO0lBQ3BDLElBQUlPLFdBQVc7UUFDYixNQUFNSyxVQUFVLE1BQU1ELGNBQWNyQjtRQUNwQyxJQUFJLENBQUNzQixTQUFTLE9BQU94RCxxREFBWUEsQ0FBQzhDLFFBQVEsQ0FBQyxJQUFJQyxJQUFJLGFBQWFuQixJQUFJb0IsR0FBRztRQUN2RSxPQUFPNUI7SUFDVDtJQUVBLHdDQUF3QztJQUN4QyxJQUFJZ0MsYUFBYTtRQUNmLE1BQU1JLFVBQVUsTUFBTUQsY0FBY3BCO1FBQ3BDLElBQUksQ0FBQ3FCLFNBQVMsT0FBT3hELHFEQUFZQSxDQUFDOEMsUUFBUSxDQUFDLElBQUlDLElBQUksYUFBYW5CLElBQUlvQixHQUFHO1FBQ3ZFLE9BQU81QjtJQUNUO0lBRUEsd0NBQXdDO0lBQ3hDLElBQUk2QixZQUFZO1FBQ2Q5QixhQUFhQyxVQUFVO1lBQUM7WUFBYTtTQUFRO1FBQzdDLElBQUlZLGFBQWE7WUFDZixNQUFNd0IsVUFBVSxNQUFNRCxjQUFjdkI7WUFDcEMsSUFBSSxDQUFDd0IsU0FBUyxPQUFPcEMsVUFBVSxvQ0FBb0M7WUFDbkUsTUFBTTJDLFFBQVFQLFFBQVFRLE9BQU8sQ0FBQ3pELFdBQVcsSUFBSSxFQUFFO1lBQy9DLE1BQU0wRCxPQUFPQyxNQUFNQyxPQUFPLENBQUNKLFNBQVNBLEtBQUssQ0FBQyxFQUFFLEdBQUdBO1lBQy9DLE9BQU8vRCxxREFBWUEsQ0FBQzhDLFFBQVEsQ0FBQyxJQUFJQyxJQUFJLENBQUMsQ0FBQyxFQUFFa0IsS0FBSyxVQUFVLENBQUMsRUFBRXJDLElBQUlvQixHQUFHO1FBQ3BFO1FBQ0EsT0FBTzVCO0lBQ1Q7SUFFQSxrQkFBa0I7SUFDbEIsSUFBSWtDLGlCQUFpQjtRQUNuQixNQUFNRSxVQUFVLE1BQU1ELGNBQWN2QjtRQUNwQyxJQUFJLENBQUN3QixTQUFTLE9BQU94RCxxREFBWUEsQ0FBQzhDLFFBQVEsQ0FBQyxJQUFJQyxJQUFJLGFBQWFuQixJQUFJb0IsR0FBRztRQUV2RSxNQUFNZSxRQUFRUCxRQUFRUSxPQUFPLENBQUN6RCxXQUFXLElBQUksRUFBRTtRQUMvQyxNQUFNMEQsT0FBT0MsTUFBTUMsT0FBTyxDQUFDSixTQUFTQSxLQUFLLENBQUMsRUFBRSxHQUFHQTtRQUUvQyxJQUFJVixvQkFBb0I7WUFDdEIsTUFBTWUsYUFBYVosUUFBUVEsT0FBTyxDQUFDeEQsZUFBZTtZQUNsRCxJQUFJNEQsZUFBZSxRQUFRO2dCQUN6QixPQUFPcEUscURBQVlBLENBQUM4QyxRQUFRLENBQUMsSUFBSUMsSUFBSSxDQUFDLENBQUMsRUFBRWtCLEtBQUssVUFBVSxDQUFDLEVBQUVyQyxJQUFJb0IsR0FBRztZQUNwRTtZQUNBLE9BQU81QjtRQUNUO1FBRUEseUJBQXlCO1FBQ3pCLElBQ0UsU0FBVXVCLFVBQVUsQ0FBQyxhQUFhc0IsU0FBUyxXQUMxQ3BDLFNBQVNjLFVBQVUsQ0FBQyxZQUFZc0IsU0FBUyxRQUMxQztZQUNBLE9BQU9qRSxxREFBWUEsQ0FBQzhDLFFBQVEsQ0FBQyxJQUFJQyxJQUFJLENBQUMsQ0FBQyxFQUFFa0IsS0FBSyxVQUFVLENBQUMsRUFBRXJDLElBQUlvQixHQUFHO1FBQ3BFO1FBRUEsT0FBTzVCO0lBQ1Q7SUFFQSxPQUFPQTtBQUNUIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXE1vaGFtYWRcXE9uZURyaXZlXFxEZXNrdG9wXFxSdWhhbl9OZXh0K2FzcFxccnVoYW5cXG1pZGRsZXdhcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBqd3RWZXJpZnkgfSBmcm9tICdqb3NlJztcclxuaW1wb3J0IHsgY29va2llcyB9IGZyb20gJ25leHQvaGVhZGVycyc7XHJcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcclxuXHJcbmNvbnN0IEpXVF9TRUNSRVQgPSBwcm9jZXNzLmVudi5KV1RfU0VDUkVUO1xyXG5jb25zdCBST0xFX0NMQUlNID0gJ2h0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSc7XHJcbmNvbnN0IFZFUklGSUVEX0NMQUlNID0gJ2h0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDkvMDkvaWRlbnRpdHkvY2xhaW1zL2FjdG9yJztcclxuXHJcbi8vIEhlbHBlciB0byBnZW5lcmF0ZSBDU1JGIHRva2VuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlQ1NSRlRva2VuKCkge1xyXG4gIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoMzIpLnRvU3RyaW5nKCdoZXgnKTsgLy8gR2VuZXJhdGVzIGEgc2VjdXJlIHJhbmRvbSB0b2tlblxyXG59XHJcblxyXG4vLyBIZWxwZXIgdG8gdmVyaWZ5IENTUkYgdG9rZW5cclxuZnVuY3Rpb24gaXNWYWxpZENTUkZUb2tlbihzZXNzaW9uVG9rZW4sIGNzcmZUb2tlbikge1xyXG4gIHJldHVybiBzZXNzaW9uVG9rZW4gPT09IGNzcmZUb2tlbjtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gdmVyaWZ5VG9rZW4odG9rZW4pIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIGF3YWl0IGp3dFZlcmlmeSh0b2tlbiwgbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKEpXVF9TRUNSRVQpKTtcclxuICB9IGNhdGNoIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJDb29raWVzKHJlc3BvbnNlLCBjb29raWVOYW1lcykge1xyXG4gIGNvb2tpZU5hbWVzLmZvckVhY2goKG5hbWUpID0+XHJcbiAgICByZXNwb25zZS5jb29raWVzLnNldChuYW1lLCAnJywge1xyXG4gICAgICBtYXhBZ2U6IDAsXHJcbiAgICAgIHBhdGg6ICcvJyxcclxuICAgIH0pXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pZGRsZXdhcmUocmVxKSB7XHJcbiAgY29uc3QgcGF0aG5hbWUgPSByZXEubmV4dFVybC5wYXRobmFtZTtcclxuICBjb25zdCBjb29raWVTdG9yZSA9IGF3YWl0IGNvb2tpZXMoKTtcclxuICBjb25zdCB0b2tlbkNvb2tpZSA9IGNvb2tpZVN0b3JlLmdldCgndG9rZW4nKTtcclxuICBjb25zdCBvdHBUb2tlbkNvb2tpZSA9IGNvb2tpZVN0b3JlLmdldCgnb3RwX3Rva2VuJyk7XHJcbiAgY29uc3QgcmVzZXRUb2tlbkNvb2tpZSA9IGNvb2tpZVN0b3JlLmdldCgncmVzZXQnKTtcclxuICBjb25zdCBjc3JmVG9rZW5Db29raWUgPSBjb29raWVTdG9yZS5nZXQoJ2NzcmZfdG9rZW4nKTsgLy8gQ1NSRiB0b2tlbiBjb29raWVcclxuICBjb25zdCByZWZlcmVyID0gcmVxLmhlYWRlcnMuZ2V0KCdyZWZlcmVyJyk7XHJcbiAgY29uc3QgdG9rZW5zUHJlc2VudCA9IFt0b2tlbkNvb2tpZSwgb3RwVG9rZW5Db29raWUsIHJlc2V0VG9rZW5Db29raWVdLmZpbHRlcihCb29sZWFuKTtcclxuICBjb25zdCByZXNwb25zZSA9IE5leHRSZXNwb25zZS5uZXh0KCk7XHJcblxyXG4gIC8vIFJlZmVyZXIgY2hlY2sgZm9yIGxvY2FsaG9zdFxyXG4gIGlmIChyZWZlcmVyID09IG51bGwgfHwgIXJlZmVyZXIuc3RhcnRzV2l0aCgnaHR0cDovL2xvY2FsaG9zdDozMDAwJykpIHtcclxuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKCdGb3JiaWRkZW4gJywgeyBzdGF0dXM6IDQwMyB9KTtcclxuICB9XHJcblxyXG4gIC8vIFByZXZlbnQgbXVsdGlwbGUgdG9rZW5zIGZyb20gYmVpbmcgc2V0IGF0IHRoZSBzYW1lIHRpbWVcclxuICBpZiAodG9rZW5zUHJlc2VudC5sZW5ndGggPiAxKSB7XHJcbiAgICBjbGVhckNvb2tpZXMocmVzcG9uc2UsIFsndG9rZW4nLCAnb3RwX3Rva2VuJywgJ3Jlc2V0J10pO1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChuZXcgVVJMKCcvdW4vbG9naW4nLCByZXEudXJsKSk7XHJcbiAgfVxyXG5cclxuICAvLyBBdXRoIHBhZ2UgY2hlY2tcclxuICBjb25zdCBpc0F1dGhQYWdlID0gWycvdW4vbG9naW4nLCAnL3VuL3JlZ2lzdGVyJ10uc29tZSgocGF0aCkgPT4gcGF0aG5hbWUuc3RhcnRzV2l0aChwYXRoKSk7XHJcbiAgY29uc3QgaXNPdHBQYWdlID0gcGF0aG5hbWUuc3RhcnRzV2l0aCgnL3VuL290cFZhbGlkYXRlUGFzc3dvcmQnKTtcclxuICBjb25zdCBpc1Jlc2V0UGFnZSA9IHBhdGhuYW1lLnN0YXJ0c1dpdGgoJy91bi9yZXNldFBhc3N3b3JkJyk7XHJcbiAgY29uc3QgaXNDb25maXJtRW1haWxQYWdlID0gcGF0aG5hbWUuc3RhcnRzV2l0aCgnL1VzZXIvVmVyaWZ5RW1haWwnKTtcclxuICBjb25zdCBpc1Byb3RlY3RlZFBhZ2UgPSBwYXRobmFtZS5zdGFydHNXaXRoKCcvVXNlcicpIHx8IHBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9BZG1pbicpO1xyXG5cclxuICBhc3luYyBmdW5jdGlvbiB2ZXJpZnlPckNsZWFyKHRva2VuQ29va2llKSB7XHJcbiAgICBpZiAoIXRva2VuQ29va2llKSByZXR1cm4gbnVsbDtcclxuICAgIGNvbnN0IGRlY29kZWQgPSBhd2FpdCB2ZXJpZnlUb2tlbih0b2tlbkNvb2tpZS52YWx1ZSk7XHJcbiAgICBpZiAoIWRlY29kZWQpIHtcclxuICAgICAgY2xlYXJDb29raWVzKHJlc3BvbnNlLCBbJ3Rva2VuJywgJ290cF90b2tlbicsICdyZXNldCddKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVjb2RlZDtcclxuICB9XHJcblxyXG4gIC8vIENTUkYgVG9rZW4gaGFuZGxpbmc6IEdlbmVyYXRlIGFuZCBzZXQgdGhlIENTUkYgdG9rZW4gaWYgbm90IHNldFxyXG4gIGlmICghY3NyZlRva2VuQ29va2llKSB7XHJcbiAgICBjb25zdCBjc3JmVG9rZW4gPSBnZW5lcmF0ZUNTUkZUb2tlbigpOyAvLyBHZW5lcmF0ZSBhIENTUkYgdG9rZW4gaWYgbm90IHByZXNlbnRcclxuICAgIHJlc3BvbnNlLmNvb2tpZXMuc2V0KCdjc3JmX3Rva2VuJywgY3NyZlRva2VuLCB7XHJcbiAgICAgIGh0dHBPbmx5OiBmYWxzZSwgLy8gQWxsb3cgYWNjZXNzIHRvIHRoaXMgY29va2llIGluIEphdmFTY3JpcHRcclxuICAgICAgc2VjdXJlOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLCAvLyBPbmx5IHNlY3VyZSBjb29raWVzIGluIHByb2R1Y3Rpb25cclxuICAgICAgc2FtZVNpdGU6ICdTdHJpY3QnLCAvLyBQcmV2ZW50IHNlbmRpbmcgdGhlIHRva2VuIGluIGNyb3NzLW9yaWdpbiByZXF1ZXN0c1xyXG4gICAgICBwYXRoOiAnLycsIC8vIEF2YWlsYWJsZSBhY3Jvc3MgdGhlIHdob2xlIHNpdGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gSGFuZGxlIENTUkYgdG9rZW4gdmFsaWRhdGlvbiBmb3Igc3RhdGUtY2hhbmdpbmcgcmVxdWVzdHMgKFBPU1QsIFBVVCwgREVMRVRFKVxyXG4gIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcgfHwgcmVxLm1ldGhvZCA9PT0gJ1BVVCcgfHwgcmVxLm1ldGhvZCA9PT0gJ0RFTEVURScpIHtcclxuICAgIGNvbnN0IGNzcmZUb2tlbkZyb21IZWFkZXIgPSByZXEuaGVhZGVycy5nZXQoJ3gtY3NyZi10b2tlbicpOyAvLyBDU1JGIHRva2VuIHNlbnQgYnkgY2xpZW50IChjdXN0b20gaGVhZGVyKVxyXG4gICAgXHJcbiAgICBpZiAoIWNzcmZUb2tlbkZyb21IZWFkZXIgfHwgIWNzcmZUb2tlbkNvb2tpZSkge1xyXG4gICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZSgnQ1NSRiB0b2tlbiBtaXNzaW5nIG9yIGludmFsaWQnLCB7IHN0YXR1czogNDAzIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBWYWxpZGF0ZSBDU1JGIHRva2VuXHJcbiAgICBpZiAoIWlzVmFsaWRDU1JGVG9rZW4oY3NyZlRva2VuQ29va2llLnZhbHVlLCBjc3JmVG9rZW5Gcm9tSGVhZGVyKSkge1xyXG4gICAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZSgnRm9yYmlkZGVuOiBJbnZhbGlkIENTUkYgdG9rZW4nLCB7IHN0YXR1czogNDAzIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gT1RQIHBhZ2UgcmVxdWlyZXMgdmFsaWQgb3RwX3Rva2VuXHJcbiAgaWYgKGlzT3RwUGFnZSkge1xyXG4gICAgY29uc3QgZGVjb2RlZCA9IGF3YWl0IHZlcmlmeU9yQ2xlYXIob3RwVG9rZW5Db29raWUpO1xyXG4gICAgaWYgKCFkZWNvZGVkKSByZXR1cm4gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KG5ldyBVUkwoJy91bi9sb2dpbicsIHJlcS51cmwpKTtcclxuICAgIHJldHVybiByZXNwb25zZTtcclxuICB9XHJcblxyXG4gIC8vIFJlc2V0IHBhZ2UgcmVxdWlyZXMgdmFsaWQgcmVzZXQgdG9rZW5cclxuICBpZiAoaXNSZXNldFBhZ2UpIHtcclxuICAgIGNvbnN0IGRlY29kZWQgPSBhd2FpdCB2ZXJpZnlPckNsZWFyKHJlc2V0VG9rZW5Db29raWUpO1xyXG4gICAgaWYgKCFkZWNvZGVkKSByZXR1cm4gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KG5ldyBVUkwoJy91bi9sb2dpbicsIHJlcS51cmwpKTtcclxuICAgIHJldHVybiByZXNwb25zZTtcclxuICB9XHJcblxyXG4gIC8vIEF1dGggcGFnZXMgaGFuZGxpbmcgKExvZ2luLCBSZWdpc3RlcilcclxuICBpZiAoaXNBdXRoUGFnZSkge1xyXG4gICAgY2xlYXJDb29raWVzKHJlc3BvbnNlLCBbJ290cF90b2tlbicsICdyZXNldCddKTtcclxuICAgIGlmICh0b2tlbkNvb2tpZSkge1xyXG4gICAgICBjb25zdCBkZWNvZGVkID0gYXdhaXQgdmVyaWZ5T3JDbGVhcih0b2tlbkNvb2tpZSk7XHJcbiAgICAgIGlmICghZGVjb2RlZCkgcmV0dXJuIHJlc3BvbnNlOyAvLyBTdGF5IG9uIGxvZ2luIHBhZ2UgYWZ0ZXIgY2xlYXJpbmdcclxuICAgICAgY29uc3Qgcm9sZXMgPSBkZWNvZGVkLnBheWxvYWRbUk9MRV9DTEFJTV0gfHwgW107XHJcbiAgICAgIGNvbnN0IHJvbGUgPSBBcnJheS5pc0FycmF5KHJvbGVzKSA/IHJvbGVzWzBdIDogcm9sZXM7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UucmVkaXJlY3QobmV3IFVSTChgLyR7cm9sZX0vZGFzaGJvYXJkYCwgcmVxLnVybCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gIH1cclxuXHJcbiAgLy8gUHJvdGVjdGVkIHBhZ2VzXHJcbiAgaWYgKGlzUHJvdGVjdGVkUGFnZSkge1xyXG4gICAgY29uc3QgZGVjb2RlZCA9IGF3YWl0IHZlcmlmeU9yQ2xlYXIodG9rZW5Db29raWUpO1xyXG4gICAgaWYgKCFkZWNvZGVkKSByZXR1cm4gTmV4dFJlc3BvbnNlLnJlZGlyZWN0KG5ldyBVUkwoJy91bi9sb2dpbicsIHJlcS51cmwpKTtcclxuXHJcbiAgICBjb25zdCByb2xlcyA9IGRlY29kZWQucGF5bG9hZFtST0xFX0NMQUlNXSB8fCBbXTtcclxuICAgIGNvbnN0IHJvbGUgPSBBcnJheS5pc0FycmF5KHJvbGVzKSA/IHJvbGVzWzBdIDogcm9sZXM7XHJcblxyXG4gICAgaWYgKGlzQ29uZmlybUVtYWlsUGFnZSkge1xyXG4gICAgICBjb25zdCBpc1ZlcmlmaWVkID0gZGVjb2RlZC5wYXlsb2FkW1ZFUklGSUVEX0NMQUlNXTtcclxuICAgICAgaWYgKGlzVmVyaWZpZWQgPT09ICdUcnVlJykge1xyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UucmVkaXJlY3QobmV3IFVSTChgLyR7cm9sZX0vZGFzaGJvYXJkYCwgcmVxLnVybCkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSb2xlLWJhc2VkIHJlc3RyaWN0aW9uXHJcbiAgICBpZiAoXHJcbiAgICAgIChwYXRobmFtZS5zdGFydHNXaXRoKCcvQWRtaW4nKSAmJiByb2xlICE9PSAnQWRtaW4nKSB8fFxyXG4gICAgICAocGF0aG5hbWUuc3RhcnRzV2l0aCgnL1VzZXInKSAmJiByb2xlICE9PSAnVXNlcicpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5yZWRpcmVjdChuZXcgVVJMKGAvJHtyb2xlfS9kYXNoYm9hcmRgLCByZXEudXJsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3BvbnNlO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJqd3RWZXJpZnkiLCJjb29raWVzIiwiY3J5cHRvIiwiSldUX1NFQ1JFVCIsInByb2Nlc3MiLCJlbnYiLCJST0xFX0NMQUlNIiwiVkVSSUZJRURfQ0xBSU0iLCJnZW5lcmF0ZUNTUkZUb2tlbiIsInJhbmRvbUJ5dGVzIiwidG9TdHJpbmciLCJpc1ZhbGlkQ1NSRlRva2VuIiwic2Vzc2lvblRva2VuIiwiY3NyZlRva2VuIiwidmVyaWZ5VG9rZW4iLCJ0b2tlbiIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiY2xlYXJDb29raWVzIiwicmVzcG9uc2UiLCJjb29raWVOYW1lcyIsImZvckVhY2giLCJuYW1lIiwic2V0IiwibWF4QWdlIiwicGF0aCIsIm1pZGRsZXdhcmUiLCJyZXEiLCJwYXRobmFtZSIsIm5leHRVcmwiLCJjb29raWVTdG9yZSIsInRva2VuQ29va2llIiwiZ2V0Iiwib3RwVG9rZW5Db29raWUiLCJyZXNldFRva2VuQ29va2llIiwiY3NyZlRva2VuQ29va2llIiwicmVmZXJlciIsImhlYWRlcnMiLCJ0b2tlbnNQcmVzZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsIm5leHQiLCJzdGFydHNXaXRoIiwic3RhdHVzIiwibGVuZ3RoIiwicmVkaXJlY3QiLCJVUkwiLCJ1cmwiLCJpc0F1dGhQYWdlIiwic29tZSIsImlzT3RwUGFnZSIsImlzUmVzZXRQYWdlIiwiaXNDb25maXJtRW1haWxQYWdlIiwiaXNQcm90ZWN0ZWRQYWdlIiwidmVyaWZ5T3JDbGVhciIsImRlY29kZWQiLCJ2YWx1ZSIsImh0dHBPbmx5Iiwic2VjdXJlIiwic2FtZVNpdGUiLCJtZXRob2QiLCJjc3JmVG9rZW5Gcm9tSGVhZGVyIiwicm9sZXMiLCJwYXlsb2FkIiwicm9sZSIsIkFycmF5IiwiaXNBcnJheSIsImlzVmVyaWZpZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./middleware.js\n");

/***/ }),

/***/ "crypto":
/*!************************************************************!*\
  !*** external "globalThis.__import_unsupported('crypto')" ***!
  \************************************************************/
/***/ ((module) => {

module.exports = globalThis.__import_unsupported('crypto');

/***/ })

});